#+STARTUP: overview
#+STARTUP: align
#+title: Emacs Configuration

The principle is *SIMPLICITY* and it means to use internal emacs packages and
make initialization file as simple as possible. For example when working with
repositories, "vc-mode" is preferred to "magit" and when working with projects
"project.el" is preferred to "projectile".

* Table of Contents :toc@4:
- [[#initializing-package-manager][Initializing Package Manager]]
- [[#setting-up-user-interface][Setting Up User Interface]]
- [[#fonts][fonts]]
- [[#theme-and-mini-buffer][theme and mini-buffer]]
- [[#whitespace][whitespace]]
- [[#fill-indicator][fill indicator]]
- [[#line-number][line number]]
- [[#dashboard][dashboard]]
- [[#all-the-icons][all-the-icons]]
- [[#dimmer][dimmer]]
- [[#org-bullet][org-bullet]]
- [[#rainbow-delimiters][rainbow-delimiters]]
- [[#highlight-current-line][highlight current line]]
- [[#whitespace-cleanup-mode][whitespace-cleanup-mode]]
- [[#popper][popper]]
- [[#olivetti][Olivetti]]
- [[#aggressive-indent][aggressive-indent]]
- [[#dart-mode][dart-mode]]
- [[#origami][Origami]]
- [[#project][project]]
- [[#smartparens][smartparens]]
- [[#consult][consult]]
- [[#corfu][corfu]]
- [[#crux][crux]]
- [[#delight][delight]]
- [[#dired][dired]]
- [[#drag-stuff][drag-stuff]]
- [[#expand-region][expand-region]]
- [[#fly-spell][fly-spell]]
- [[#grammar-check][grammar check]]
- [[#org][org]]
  - [[#hide-target][hide target]]
  - [[#agenda][agenda]]
- [[#pdf-tools][PDF-Tools]]
  - [[#navigation][Navigation]]
- [[#toc-org][toc-org]]
- [[#vertico][vertico]]
- [[#orderless][orderless]]
- [[#vundo][vundo]]
- [[#which-key][which-key]]
- [[#yasnippet][yasnippet]]

* Initializing Package Manager

[[http://www.bazinevis.com/emacs/use-package.html][use-package]]

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
* Setting Up User Interface
#+begin_src emacs-lisp
  (setq
   ;; Don't show the startup screen
   inhibit-startup-screen t

   ;; Double-spaces after periods is morally wrong.
   sentence-end-double-space nil

   ;; Never ding at me, ever.
   ring-bell-function 'ignore

   ;; Save existing clipboard text into the kill ring before replacing it.
   save-interprogram-paste-before-kill t

   ;; Prompts should go in the minibuffer, not in a GUI.
   use-dialog-box t

   ;; Fix undo in commands affecting the mark.
   mark-even-if-inactive nil

   ;; Let C-k delete the whole line.
   kill-whole-line t

   ;; accept 'y' or 'n' instead of yes/no
   use-short-answers t)

  ;; Never mix tabs and spaces. Never use tabs, period.
  (setq-default indent-tabs-mode nil)

  (delete-selection-mode t)
  (column-number-mode)

  (setq
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)

  (setq custom-file (make-temp-name "/tmp/"))

  ;; Makes *scratch* empty.
  (setq initial-scratch-message "")

  ;; Removes *scratch* from buffer after the mode has been set.
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ;; ;; Removes *messages* from the buffer.
  ;; (setq-default message-log-max nil)
  ;; (kill-buffer "*Messages*")

  ;; ;; Removes *Completions* from buffer after you've opened a file.
  ;; (add-hook 'minibuffer-exit-hook
  ;;           '(lambda ()
  ;;              (let ((buffer "*Completions*"))
  ;;                (and (get-buffer buffer)
  ;;                     (kill-buffer buffer)))))

  ;;Don't show * Buffer list* when opening multiple files at the same time.
  (setq inhibit-startup-buffer-menu t)

  ;; Show only one active window when opening multiple files at the same time.
  (add-hook 'window-setup-hook 'delete-other-windows)

  ;; no need to show menu bar
  (menu-bar-mode -1)

  ;; no need to show tool bar
  (tool-bar-mode -1)

  ;; no need to shrow scroll bar
  (scroll-bar-mode -1)
#+end_src
* fonts
#+begin_src emacs-lisp
  (set-frame-font "Noto Sans Mono 10" nil t)
#+end_src
* theme and mini-buffer
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme)
  (use-package smart-mode-line)
  (use-package smart-mode-line-atom-one-dark-theme)

  (setq sml/no-confirm-load-theme t)
  (sml/apply-theme 'atom-one-dark)
  (sml/setup)
;;  (rich-minority-mode 1)

  (display-time-mode)
  (load-theme 'dracula' t)
#+END_SRC
* whitespace
#+begin_src emacs-lisp
  (global-whitespace-mode 1)
  (setq whitespace-style
        (quote (
                face
                trailing
                ;lines-tail
                empty
                indention
                spaces
                space-mark
                )))
#+end_src
* fill indicator
#+begin_src emacs-lisp
  (global-display-fill-column-indicator-mode t)
  (setq-default fill-column 80)
#+end_src
* line number
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-width-start t)
#+END_SRC
* [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
An extensible emacs startup screen showing you what’s most important.
Features

+ Displays an awesome Emacs banner!
+ Recent files
+ Bookmarks list
+ Recent projects list (Depends on `projectile` or `project.el` package)
+ Org mode agenda
+ Register list
+ Supports both all-the-icons and nerd-icons

You will need the following packages which are all available on MELPA:

+ page-break-lines (optional)
+ projectile (optional)
+ all-the-icons (optional)
+ nerd-icons (optional)

You can set up the dashboard to open automatically at startup using
dashboard-setup-startup-hook:

;; use-package with package.el:
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

Alternatively, if you don’t want the dashboard to open by default, you
can use the interactive function dashboard-open to open it when you do
want it.

The widget “projects”, which shows a list of recent projects, is not
enabled by default since it depends on packages that might not be
available. To activate the widget, set the variable
dashboard-projects-backend to either =’projectile= or =’project-el=, then
add an entry like (projects . 5) to the variable dashboard-items.

The function dashboard-refresh-buffer (an alias for dashboard-open) can be
used to visit and refresh the dashboard.

To update the banner or banner title

;; Set the title
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
;; Set the banner
(setq dashboard-startup-banner [VALUE])
;; Value can be:
;;  - 'official which displays the official emacs logo.
;;  - 'logo which displays an alternative emacs logo.
;;  - an integer which displays one of the text banners
;;    (see dashboard-banners-directory files).
;;  - a string that specifies a path for a custom banner
;;    currently supported types are gif/image/text/xbm.
;;  - a cons of 2 strings which specifies the path of an image to use
;;    and other path of a text file to use if image isn't supported.
;;    ("path/to/image/file/image.png" . "path/to/text/file/text.txt").
;;  - a list that can display an random banner,
;;    supported values are: string (filepath), 'official, 'logo and integers.

;; Content is not centered by default. To center, set
(setq dashboard-center-content t)
;; vertically center content
(setq dashboard-vertically-center-content t)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts nil)

To customize which items are displayed, you can use the following snippet

(setq dashboard-items '((recents   . 5)
                        (bookmarks . 5)
                        (projects  . 5)
                        (agenda    . 5)
                        (registers . 5)))

This will add the recent files, bookmarks, projects, org-agenda and registers widgets to your dashboard each displaying 5 items.

To customize which widgets to display in order (example: Banner, footer message …):

(setq dashboard-startupify-list '(dashboard-insert-banner
                                  dashboard-insert-newline
                                  dashboard-insert-banner-title
                                  dashboard-insert-newline
                                  dashboard-insert-navigator
                                  dashboard-insert-newline
                                  dashboard-insert-init-info
                                  dashboard-insert-items
                                  dashboard-insert-newline
                                  dashboard-insert-footer))

See dashboard-startupify-list for all the widgets avalaibles.

To enable cycle navigation between each section:

(setq dashboard-navigation-cycle t)

To customize string format in shortcuts:

(setq dashboard-heading-shorcut-format " [%s]")

To customize item shortcuts:

(setq dashboard-item-shortcuts '((recents   . "r")
                                 (bookmarks . "m")
                                 (projects  . "p")
                                 (agenda    . "a")
                                 (registers . "e")))

To modify the widget heading name:

(setq dashboard-item-names '(("Recent Files:"               . "Recently opened files:")
                             ("Agenda for today:"           . "Today's agenda:")
                             ("Agenda for the coming week:" . "Agenda:")))

To use all-the-icons package:

(setq dashboard-icon-type 'all-the-icons)  ; use `all-the-icons' package

To use nerd-icons package:

(setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
(setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package

To add icons to the widget headings and their items:

(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)

To modify heading icons with another icon from all-the-icons octicons:

(dashboard-modify-heading-icons '((recents   . "file-text")
                                  (bookmarks . "book")))

To modify heading icons with another icon from nerd-icons octicons:

(dashboard-modify-heading-icons '((recents   . "nf-oct-file_text")
                                  (bookmarks . "nf-oct-book")))

To customize the buttons of the navigator like this:

;; Format: "(icon title help action face prefix suffix)"
(setq dashboard-navigator-buttons
      `(;; line1
        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
          "Homepage"
          "Browse homepage"
          (lambda (&rest _) (browse-url "homepage")))
         ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
         ("?" "" "?/h" #'show-help nil "<" ">"))
        ;; line 2
        ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
          "Linkedin"
          ""
          (lambda (&rest _) (browse-url "homepage")))
         ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))

To use it with counsel-projectile or persp-projectile

(setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

Or

(setq dashboard-projects-switch-function 'projectile-persp-switch-project)

Org mode’s agenda

To display today’s agenda items on the dashboard, add agenda to dashboard-items:

(add-to-list 'dashboard-items '(agenda) t)

To show agenda for the upcoming seven days set the variable dashboard-week-agenda to t.

(setq dashboard-week-agenda t)

By default org-agenda entries are filter by time, only showing those task with DEADLINE, SCHEDULE-TIME or TIMESTAMP . To show all agenda entries (except DONE)

(setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)

To have an extra filter, MATCH parameter is exposed as dashboard-match-agenda-entry variable, by default is nil

    ‘MATCH’ is a tags/property/TODO match. Org iterates only matched headlines. Org iterates over all headlines when MATCH is nil or t.

See Org Manual for more information.

Once the agenda appears in the dashboard, org-agenda-files stay open. With (setq dashboard-agenda-release-buffers t) the org files are close. Note that this could slow down the dashboard buffer refreshment.
Agenda sort

Agenda is now sorted with dashboard-agenda-sort-strategy following the idea of org-agenda-sorting-strategy. Suported strategies are priority-up, priority-down, time-up, time-down, todo-state-up and todo-state-down
Agenda format

To personalize the aspect of each entry, there is dashboard-agenda-prefix-format which initial value is ~” %i %-12:c %-10s “~ where %i is the icon category of the item (see org-agenda-category-icon-alist), %-12:c gives the category a 12 chars wide field and append a colon to the category. A similar padding but for a 10 wide field is %-10s that is for the scheduling or deadline information. For more information see org-agenda-prefix-format.

Deadline or Scheduling time will be formatted using dashboard-agenda-time-string-format and the keywords (TODO, DONE) respect org-agenda-todo-keyword-format.
Agenda tags

To customize the tags format there is a variable dashboard-agenda-tags-format. This variable could be any function that receives the tags directly from org-get-tags. By default dashboard-agenda-tags-format is set to identity. To hide the tags set the variable to ignore: (setq dashboard-agenda-tags-format 'ignore) or to nil.
FAQ
Faces

It is possible to customize Dashboard’s appearance using the following faces:

dashboard-banner-logo-title
    Highlights the banner title.
dashboard-text-banner
    Highlights text banners.
dashboard-heading
    Highlights widget headings.
dashboard-items-face
    Highlights widget items.

Shortcuts

You can use any of the following shortcuts inside Dashboard
Shortcut	Function
Tab Or C-i	Next Item
Shift-Tab	Previous Item
Return / Mouse Click / C-m	Open
r	Recent files
m	Bookmarks
p	Projects
a	Org-Mode Agenda
e	Registers
g	Refresh contents
{	Previous section
}	Next section






#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    :init
    (setq dashboard-items '((projects . 5)
                            (recents . 5)))
    ;; Set the title
    (setq dashboard-banner-logo-title "bazinevis.com/emacs")
    ;; Set the banner
    (setq dashboard-startup-banner "~/bazinevis_com_/config_/emacs_/bz.png")
    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)
    ;; To disable shortcut "jump" indicators for each section, set
    (setq dashboard-show-shortcuts t)
    ;(setq dashboard-display-icons-p t)
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'project-el)
    )
#+end_src
* [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
In order for the icons to work it is very important that you install the
Resource Fonts included in this package, they are available in the fonts
directory. You can also install the latest fonts for this package in the
(guessed?) based on the OS by calling the following function;

M-x all-the-icons-install-fonts

Bear in mind, this will also run fc-cache -f -v on MacOS and Linux which
can take some time to complete.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

* dimmer
#+begin_src emacs-lisp
  (use-package dimmer

    :config
    (setq dimmer-fraction 0.4)
    (setq dimmer-adjustment-mode :foreground)
    (setq dimmer-use-colorspace :rgb)
    (dimmer-mode 1))
#+end_src
* [[https://github.com/sabof/org-bullets][org-bullet]]
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+end_src

* [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
delimiters such as parentheses, brackets or braces according to their
depth. Each successive level is highlighted in a different color. This
makes it easy to spot matching delimiters, orient yourself in the code,
and tell which statements are at a given depth.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
* highlight current line
#+begin_src emacs-lisp
    (global-hl-line-mode nil)

    (set-face-attribute 'line-number-current-line nil
                        :foreground "#ffff00"
                        ;:background "#696969"
                        :weight 'bold
                        ;:box t
                        )
#+END_SRC
* [[https://github.com/purcell/whitespace-cleanup-mode][whitespace-cleanup-mode]]
This Emacs library minor mode will intelligently call whitespace-cleanup
before buffers are saved.

whitespace-cleanup-mode is a minor mode which calls whitespace-cleanup
before saving the current buffer, by default only if the whitespace in the
buffer was initially clean. It determines this by quickly checking to see
if whitespace-cleanup would have any effect on the buffer. With the custom
variable whitespace-cleanup-mode-only-if-initially-clean toggled off, it will always clean up the buffer for you.

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))
#+end_src

* popper
#+begin_src emacs-lisp
  ;; (use-package popper
  ;;   :bind (("C-`"   . popper-toggle)
  ;;          ("M-`"   . popper-cycle)
  ;;          ("C-M-`" . popper-toggle-type))
  ;;   :init
  ;;   (setq (opper-reference-buffers
  ;;          '("\\*Messages\\*"
  ;;            "Output\\*$"
  ;;            "\\*Async Shell Command\\*"
  ;;            help-mode
  ;;            compilation-mode))
  ;;         (popper-mode +1)
  ;;         (popper-echo-mode +1))
#+end_src
* Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :config
    (setq-default olivetti-body-width 100))
#+END_SRC
* aggressive-indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1))
#+end_src
* [[https://github.com/emacsorphanage/dart-mode][dart-mode]]
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode)
#+END_SRC

* Origami
# #+begin_src emacs-lisp
#   (use-package origami
#   :config
#   (setq origami-fold-replacement "<V>")
#   (define-prefix-command 'origami-mode-map)
#   (global-set-key (kbd "C-x C-z") 'origami-mode-map)
#   (global-origami-mode)
#   :bind
#   (:map origami-mode-map
#    ("o" . origami-open-node)
#    ("O" . origami-open-node-recursively)
#    ("c" . origami-close-node)
#    ("C" . origami-close-node-recursively)
#    ("a" . origami-toggle-node)
#    ("A" . origami-recursively-toggle-node)
#    ("R" . origami-open-all-nodes)
#    ("M" . origami-close-all-nodes)
#    ("v" . origami-show-only-node)
#    ("k" . origami-previous-fold)
#    ("j" . origami-forward-fold)
#    ("x" . origami-reset)))
#   ;(add-hook 'org-mode-hook
#   ;        (lambda () (setq-local origami-fold-style 'triple-braces)))
# #+end_src
* project
#+begin_src emacs-lisp
  (use-package project)
#+end_src

* smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-mode
    :ensure smartparens  ;; install the package
    :delight
    :hook (prog-mode text-mode markdown-mode)
    :config
    ;; load default config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+END_SRC
* consult
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src
* corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)
   
    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
  ;; Enable auto completion and configure quitting
  (setq corfu-auto t
        corfu-quit-no-match 'separator) ;; or t
  (setq-local corfu-auto        t
              corfu-auto-delay  0 ;; TOO SMALL - NOT RECOMMENDED
              corfu-auto-prefix 3 ;; TOO SMALL - NOT RECOMMENDED
              completion-styles '(basic))
#+end_src

#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-sgml)
    (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
;;    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
;;    (add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src
* crux
A Collection of Ridiculously Useful eXtensions for Emacs. crux
bundles many useful interactive commands to enhance your overall
Emacs experience.

Most of the crux commands are related to the editing experience,
but there are also a bunch of utility commands that are just very
useful to have (e.g. crux-open-with and crux-reopen-as-root).

crux doesn't setup any key-bindings for its commands out-of-the-box. There
are several reasons for this:

Here's the list of some suggested keybindings. Feel free to bind
individual commands to whatever key-bindings you prefer.

+ crux-open-with :: C-c o
  Open the currently visited file with an external program.
+ crux-smart-kill-line ::	C-k or Super-k
  First kill to end of line, then kill the whole line.
+ crux-smart-open-line-above :: C-S-RET or Super-o
  Insert an empty line above the current line and indent it
  properly.
+ crux-smart-open-line ::	S-RET or M-o
  Insert an empty line and indent it properly (as in most IDEs).
+ crux-cleanup-buffer-or-region :: C-c n
  Fix indentation in buffer and strip whitespace.
+ crux-recentf-find-file :: C-c f or Super-r
  Open recently visited file.
+ crux-recentf-find-directory :: C-c F
  Open recently visited directory.
+ crux-view-url :: C-c u
  Open a new buffer containing the contents of URL.
+ crux-eval-and-replace :: C-c e
  Eval a bit of Emacs Lisp code and replace it with its result.
+ crux-transpose-windows :: C-x 4 t
  Transpose the buffers between two windows.
+ crux-delete-file-and-buffer :: C-c D
  Delete current file and buffer.
+ crux-copy-file-preserve-attributes :: C-c c
  Copy current file with file attributes preserved
+ crux-duplicate-current-line-or-region :: C-c d
  Duplicate the current line (or region).
+ crux-duplicate-and-comment-current-line-or-region :: C-c M-d
  Duplicate and comment the current line (or region).
+ crux-rename-file-and-buffer :: C-c r
  Rename the current buffer and its visiting file if any.
+ crux-visit-term-buffer :: C-c t
  Open a terminal emulator (ansi-term).
+ crux-kill-other-buffers :: C-c k
  Kill all open buffers except the one you're currently in.
+ crux-indent-defun :: C-M z
  Indent the definition at point.
+ crux-indent-rigidly-and-copy-to-clipboard :: C-c TAB
  Indent and copy region to clipboard
+ crux-find-user-init-file :: C-c I
  Open user's init file.
+ crux-find-user-custom-file :: C-c ,
  Open user's custom file.
+ crux-find-shell-init-file :: C-c S
  Open shell's init file.
+ crux-top-join-line :: Super-j or C-^
  Join lines
+ crux-kill-whole-line :: Super-k
  Kill whole line
+ crux-kill-line-backwards :: C-Backspace
  Kill line backwards
+ crux-kill-and-join-forward :: C-S-Backspace or C-k
  If at end of line, join with following; otherwise kill line.
+ crux-kill-buffer-truename :: C-c P
  Kill absolute path of file visited in current buffer.
+ crux-ispell-word-then-abbrev :: C-c i
  Fix word using ispell and then save to abbrev.
+ crux-upcase-region :: C-x C-u
  upcase-region when transient-mark-mode is on and region is active.
+ crux-downcase-region :: C-x C-l
  downcase-region when transient-mark-mode is on and region is
  active.
+ crux-capitalize-region :: C-x M-c
  capitalize-region when transient-mark-mode is on and region is
  active.
+ crux-other-window-or-switch-buffer :: M-o
  Select other window, or switch to most recent buffer if only one
  windows.

Here's how you'd bind some of the commands to keycombos:

(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
(global-set-key (kbd "C-c o") #'crux-open-with)
(global-set-key [(shift return)] #'crux-smart-open-line)
(global-set-key (kbd "s-r") #'crux-recentf-find-file)
(global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)

For crux-ispell-word-then-abbrev to be most effective you'll also need to add this to your config:

(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)

Using the bundled advices

crux ships with some handy advises that can enhance the operation of existing commands.
(crux-with-region-or-buffer)

You can use crux-with-region-or-buffer to make a command acting normally on a region to operate on the entire buffer in the absence of a region. Here are a few examples you can stuff in your config:

(crux-with-region-or-buffer indent-region)
(crux-with-region-or-buffer untabify)

(crux-with-region-or-line)

Likewise, you can use crux-with-region-or-line to make a command alternately act on the current line if the mark is not active:

(crux-with-region-or-line comment-or-uncomment-region)

(crux-with-region-or-sexp-or-line)

Similarly, crux-with-region-or-sexp-or-line makes a command that acts on the active region, or else the current list (or string), or finally the current line:

(crux-with-region-or-sexp-or-line kill-region)

(crux-with-region-or-point-to-eol)

Sometimes you might want to act on the point until the end of the current line, rather than the whole line, in the absence of a region:

(crux-with-region-or-point-to-eol kill-ring-save)

Minor modes
(crux-reopen-as-root-mode)

Crux provides a crux-reopen-as-root command for reopening a file as root. This global minor mode changes find-file so all root files are automatically opened as root.

#+begin_src emacs-lisp
  (use-package crux)
#+end_src
* delight
#+begin_src emacs-lisp
  (use-package delight)
#+end_src

* dired
#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :bind
    (:map dired-mode-map
          ("." . dired-hide-dotfiles-mode))
    :hook
    (dired-mode . dired-hide-dotfiles-mode))

    (use-package all-the-icons-dired)
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
    (add-hook 'dired-mode-hook #'dired-hide-dotfiles-mode)
    (setq dired-dwim-target t)
#+end_src

* drag-stuff
#+begin_src emacs-lisp
    (use-package drag-stuff
      :config (drag-stuff-global-mode 1))
#+end_src
* [[https://github.com/magnars/expand-region.el][expand-region]]
Expand region increases the selected region by semantic units. Just keep
pressing the key until it selects what you want.

An example:

(setq alphabet-start "abc def")

With the cursor at the c, it starts by marking the entire word abc, then
expand to the contents of the quotes abc def, then to the entire quote
"abc def", then to the contents of the sexp setq alphabet-start "abc def"
and finally to the entire sexp.

You can set it up like this:

(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

If you expand too far, you can contract the region by pressing - (minus
key), or by prefixing the shortcut you defined with a negative argument:
C-- C-=.

Expand region works fairly well with most languages, due to the general
nature of the basic expansions:

er/mark-word
er/mark-symbol
er/mark-symbol-with-prefix
er/mark-next-accessor
er/mark-method-call
er/mark-inside-quotes
er/mark-outside-quotes
er/mark-inside-pairs
er/mark-outside-pairs
er/mark-comment
er/mark-url
er/mark-email
er/mark-defun

However, most languages also will benefit from some specially crafted
expansions. For instance, expand-region comes with these extra expansions
for html-mode:

er/mark-html-attribute
er/mark-inner-tag
er/mark-outer-tag

You can add your own expansions to the languages of your choice simply by
creating a function that looks around point to see if it's inside or
looking at the construct you want to mark, and if so - mark it.

There's plenty of examples to look at in these files.

After you make your function, add it to a buffer-local version of the
er/try-expand-list.

Example:

Let's say you want expand-region to also mark paragraphs and pages in
text-mode. Incidentally Emacs already comes with mark-paragraph and
mark-page. To add it to the try-list, do this:

(defun er/add-text-mode-expansions ()
  (make-variable-buffer-local 'er/try-expand-list)
  (setq er/try-expand-list (append
                            er/try-expand-list
                            '(mark-paragraph
                              mark-page))))

(add-hook 'text-mode-hook 'er/add-text-mode-expansions)

Add that to its own file, and add it to the expand-region.el-file, where
it says "Mode-specific expansions"

#+begin_src emacs-lisp
  (use-package expand-region)
#+end_src
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=")           'er/expand-region)
#+end_src

* fly-spell
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
* grammar check
#+begin_src emacs-lisp
  (setq langtool-java-classpath
        "/usr/share/languagetool:/usr/share/java/languagetool/*")
  (global-set-key "\C-x4w" 'langtool-check)
  (global-set-key "\C-x4W" 'langtool-check-done)
  (global-set-key "\C-x4l" 'langtool-switch-default-language)
  (global-set-key "\C-x44" 'langtool-show-message-at-point)
  (global-set-key "\C-x4c" 'langtool-interactive-correction)
  (use-package langtool)
#+end_src

* org
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/bazinevis_com_/tasks.org")
           "* TODO %?")
          ("d" "Dictionary" entry (file "~/bazinevis_com_/dictionary.org")
           "* %^{word} :: %^{definition}\n \+ %^{example}")
          )
        )
  (global-set-key (kbd "s-z c") #'org-capture)
  (add-hook 'org-mode-hook #'olivetti-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'display-line-numbers-mode)
  (add-hook 'org-mode-hook #'toc-org-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
  (setq org-ellipsis " ⤵")
#+END_SRC
#+begin_src emacs-lisp
  (global-set-key (kbd "M-q")           'org-fill-paragraph)
  (global-set-key (kbd "C-x n s")       'org-narrow-to-subtree)
  (global-set-key (kbd "C-x n b")       'org-narrow-to-block)
  (global-set-key (kbd "C-x n w")       'widen)
#+end_src
** hide target
#+BEGIN_SRC emacs-lisp
  (defcustom org-hidden-links-additional-re "\\(<<\\)[[:alnum:]]+\\(>>\\)"
    "Regular expression that matches strings where the invisible-property of the sub-matches 1 and 2 is set to org-link."
    :type '(choice (const :tag "Off" nil) regexp)
    :group 'org-link)
  (make-variable-buffer-local 'org-hidden-links-additional-re)

  (defun org-activate-hidden-links-additional (limit)
    "Put invisible-property org-link on strings matching `org-hide-links-additional-re'."
    (if org-hidden-links-additional-re
        (re-search-forward org-hidden-links-additional-re limit t)
      (goto-char limit)
      nil))

  (defun org-hidden-links-hook-function ()
    "Add rule for `org-activate-hidden-links-additional' to `org-font-lock-extra-keywords'.
  You can include this function in `org-font-lock-set-keywords-hook'."
    (add-to-list 'org-font-lock-extra-keywords
                 '(org-activate-hidden-links-additional
                   (1 '(face org-target invisible org-link))
                   (2 '(face org-target invisible org-link)))))

  (add-hook 'org-font-lock-set-keywords-hook #'org-hidden-links-hook-function)
#+END_SRC
** agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/bazinevis_com_"))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PROG(p)" "DONE(d)")))
#+end_src
# ** org-roam
# #+BEGIN_SRC emacs-lisp
#   ;; (use-package org-roam
#   ;;   :bind (("C-c r c" . org-roam-capture)
#   ;;          ("C-c n f" . org-roam-node-find)
#   ;;          ("C-c n i" . org-roam-node-insert))
#   ;;   :config
#   ;;   (org-roam-setup))
#   ;; (setq org-roam-directory (file-truename "~/bazinevis_com_"))
#   ;; (setq org-roam-capture-templates
#   ;;       '(
#   ;;         ("p" "programming notes")
#   ;;         ("pc" "concepts"
#   ;;          plain "%?"
#   ;;          :target (file+head "programming_/concepts_/${slug}.org"
#   ;;                             "#+title: ${title}\n#+filetags: :PROGRAMMING:CONCEPTS:")
#   ;;          :unnarrowed t)

#   ;;         ("pd" "dart"
#   ;;          plain "%?"
#   ;;          :target (file+head "programming_/dart_/${slug}.org"
#   ;;                             "#+title: ${title}\n#+filetags: :PROGRAMMING:DART:")
#   ;;          :unnarrowed t)

#   ;;         ("b" "books")
#   ;;         ("bd" "dart"
#   ;;          plain "%?"
#   ;;          :target (file+head "books_/dart_/${slug}.org"
#   ;;                             "#+title: ${title}\n")
#   ;;          :unnarrowed t)
#   ;;         )
#   ;;       )
# #+end_src
* PDF-Tools
** Navigation
+ Scroll Up / Down by Page-full :: space / backspace
Scroll Up / Down by Line	C-n / C-p
Scroll Right / Left	C-f / C-b
First Page / Last Page	<, M-< / >, M->
Next Page / Previous Page	n / p
Incremental Search Forward / Backward	C-s / C-r
Occur (list all lines containing a phrase)	M-s o
Jump to Occur Line	RETURN
Pick a Link and Jump	F
Incremental Search in Links	f
History Back / Forwards	l / r
Display Outline	o
Jump to Section from Outline	RETURN
Jump to Page	M-g g
Store position / Jump to position in register	m / '



Annotations	
List Annotations	C-c C-a l
Jump to Annotations from List	SPACE
Mark Annotation for Deletion	d
Delete Marked Annotations	x
Unmark Annotations	u
Close Annotation List	q
Enable/Disable Following Annotations	C-c C-f
Add and Edit Annotations	Select region via Mouse selection.
	Then left-click context menu OR keybindings below
Add a Markup Annotation	C-c C-a m
Add a Highlight Markup Annotation	C-c C-a h
Add a Strikeout Markup Annotation	C-c C-a o
Add a Squiggly Markup Annotation	C-c C-a s
Add an Underline Markup Annotation	C-c C-a u
Add a Text Annotation	C-c C-a t


Display	
Zoom in / Zoom out	+ / -
Fit Height / Fit Width / Fit Page	H / W / P
Trim Margins (set slice to bounding box)	s b
Reset Margins	s r
Reset Zoom	0


Syncing with AUCTeX	
Refresh File (e.g., after recompiling source)	g
Jump to PDF Location from Source	C-c C-g
Jump Source Location from PDF	C-mouse-1

Miscellaneous	
Print File	C-c C-p
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src
* [[https://github.com/snosov1/toc-org][toc-org]]
toc-org helps you to have an up-to-date table of contents in org files
without exporting.

After the installation, every time you’ll be saving an org file, the first
headline with a :TOC: tag will be updated with the current table of
contents.

For setting max depth of headlines in the table of contents we can specify
the depth value after underline in the tag. For example:
+ :TOC_2: - sets the max depth of the headlines in the table of contents
  to 2 (the default)

You can also use @ as separator, instead of _.

If you call M-x org-open-at-point (C-c C-o) when you’re at a TOC entry,
the point will jump to the corresponding heading.

#+begin_src emacs-lisp
  (use-package toc-org)
#+end_src

* vertico
#+begin_src emacs-lisp
  (use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

* orderless
#+begin_src emacs-lisp
  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* [[https://github.com/casouri/vundo][vundo]]
Vundo (visual undo) displays the undo history as a tree and lets you
move in the tree to go back to previous buffer states. To use vundo,
type M-x vundo RET in the buffer you want to undo. An undo tree buffer
should pop up. To move around, type:

+ f :: to go forward
+ b :: to go backward
+ n :: to go to the node below when at a branch point
+ p :: to go to the node above
+ a :: to go back to the last branching point
+ e :: to go forward to the end/tip of the branch
+ l :: to go to the last saved node
+ r :: to go to the next saved node
+ m :: to mark the current node for diff
+ u :: to unmark the marked node
+ d :: to show a diff between the marked (or parent) and current nodes
+ q :: to quit, you can also type C-g
+ C-x C-s :: save the buffer at the current undo state

n/p may need some more explanation. In the following tree, n/p can
move between A and B because they share a parent (thus at a branching
point), but not C and D.

         A  C
    ──○━━○──○──○──○
      ┃  ↕︎
      ┗━━○──○──○
         B  D

By default, you need to press RET to “commit” your change and if you
quit with q or C-g, the changes made by vundo are rolled back. You can
set ‘vundo-roll-back-on-quit’ to nil to disable rolling back.

You might see some green nodes in the tree, those are the buffer
states that have been saved to disk; the last saved node is emphasized
in bold. You can type "l" to jump to the last saved node.

#+begin_src emacs-lisp
  (use-package vundo
    :bind
    ("C-/" . 'vundo))
#+end_src

* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight)
  (which-key-mode)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    ;(setq yas-snippet-dirs '("~/bazinevis_com_/config_/emacs_/snippets_"))
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC
